---json
{
    "canonical":"page_sql",
    "title":"How to define your data set with Sql",
    "description":"This page defines the sql that can be used to retrieve data from pages",
    "name":"Page Sql"
}
---
====== ComboStrap - Page Sql ======


===== About =====
''page sql'' is a ''SELECT'' sql syntax that permits to select the page and return [[docs:templating:variable|page attribute]] used in a [[docs:templating:iterator|template iterator]].



===== Example =====


==== Recent Pages Modified ====

This example select the last 4 pages recently modified on the whole site.

If you want to get the modification date and the [[docs:semantic:path|path]], you would execute this query:

<code sql>
select date_modified, path, name order by date_modified desc limit 4
</code>

<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select date_modified, path, name order by date_modified desc limit 4
</data>
^ Date Modified ^ Path ^
<template>
| $date_modified | [[$path|$path]] |
</template>
</iterator>
</code>
This logical sql will return the following data for this website.
</webcode>


===== Syntax =====

==== Select ====

<railroad>
<code bnf display="none">
'SELECT' attribute {',' attribute} \
[ 'WHERE' predicate {',' predicate } ] \
[ 'ORDER BY' attribute ('ASC'|'DESC')? {',' attribute ('ASC'|'DESC')?} ] \
[ 'LIMIT' 'Number' ] ;
</code>
</railroad>


==== Attribute ====
The ''attribute'' are defined in the [[docs:templating:variable|page attribute]] 

==== Predicate ====

A predicate takes the below form:
<railroad>
<code bnf display="none">
attribute  ( ('='|'!=')  'value' ||  ['NOT'] ('GLOB' glob-pattern | 'LIKE'  like-pattern  ['ESCAPE' 'char'])) 
</code>
</railroad>

=== glob-pattern ===

''GLOB'' pattern matching is case sensitive and uses the [[kb>glob|Unix file globbing syntax]] for its wildcards:
      * ''*'' matches any number of characters (including none)
      * ''?'' matches exactly one character.
      * ''{}'' specify a collection of subpatterns. For example: ''{sun,moon,stars}'' matches ''sun'', ''moon'', or ''stars''.
      * ''[]'' specify a set of single characters or, when the hyphen character ''-'' is used, a range of characters. Example: ''[aeiou]'' matches any lowercase vowel, ''[0-9]'' matches any digit.
      * the backslash character ''\'' is the escape character. ie ''\\'' matches a single backslash, ''\?'' matches the question mark.
       * any other characters match itself.

=== like-pattern ===

The ''LIKE'' is not case sensitive and in the pattern expression:
      * ''%'' matches any sequence of zero or more characters 
      * ''_'' matches any single character.
      * any other characters match itself.




**example:** If you want to get:
  * the [[docs:semantic:path|path]] and [[docs:semantic:title|title]] of all pages 
  * that have the terms ''image'', ''svg'' or ''raster'' in their [[docs:semantic:path|path]]
you would use the following logical sql:
<code sql>
select path, title where path like '%image%' or path like '%svg%' or path like '%raster%'
</code>

<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select path, title where path like '%image%' or path like '%svg%' or path like '%raster%'
</data>
^ Path ^ Title ^
<template>
| [[$path|$path]] | $title |
</template>
</iterator>
</code>
This logical sql will return the following data for this website.
</webcode>



