---json
{
    "canonical":"logical_sql",
    "title":"How to define your data set with Logical Sql",
    "description":"This page defines the logical sql that to define the data set used in the template",
    "name":"Logical Sql"
}
---
====== ComboStrap - Logical Sql ======


===== About =====
''logical sql'' is a sql syntax that permits to define logically the data used in a [[docs:templating:iterator|template iterator]].



===== Example =====


==== Pattern matching comparison (Like) ====

This example shows you the usage of ''like'' for pattern matching.
If you want to get:
  * the [[docs:semantic:path|path]] and [[docs:semantic:title|title]] of all pages 
  * that have the terms ''image'', ''svg'' or ''raster'' in their [[docs:semantic:path|path]]
you would use the following logical sql:
<code sql>
select path, title where path like '%image%' or path like '%svg%' or path like '%raster%'
</code>

<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select path, title where path like '%image%' or path like '%svg%' or path like '%raster%'
</data>
^ Path ^ Title ^
<template>
| [[$path|$path]] | $title |
</template>
</iterator>
</code>
This logical sql will return the following data for this website.
</webcode>


<note>
In a ''like'' pattern expression:
  * "%" matches any sequence of zero or more characters 
  * an underscore ("_") matches any single character.
  * any other characters match itself.
</note>
===== Syntax =====

<code sql>
select 
   attribute,
   ...
where
  attributePredicate [and|or]
order by
  attribute [asc|desc],
  ...
limit N
</code>
where:
  * the ''select'' clause is followed by a series of [[docs:templating:variable|possible template variable]] (ie page attribute)
  * the ''where''  clause is followed by a series of ''predicates''. The possible predicates are described below:
<code sql>
identifier = 'value'
identifier != 'value'
identifier [not] like 'pattern' -- "%" matches any sequence of zero or more characters and an underscore ("_") matches any single character.
identifier is [not] null
identifier [not] between x and y
identifier in (x, y, ...)
</code>
  * the ''order by'' clause is followed by a series of  [[docs:templating:variable|template variable]] with an optional order (''asc'' for ascendant and ''desc'' for descendant)
  * the ''limit'' clause will return the ''N'' first rows.

