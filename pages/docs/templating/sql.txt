---json
{
    "canonical":"page_sql",
    "title":"How to define your data set with Sql",
    "description":"This page defines the sql that can be used to retrieve data from pages",
    "name":"Page Sql"
}
---
====== ComboStrap - Page Sql ======


===== About =====
''page sql'' is a ''SELECT'' sql syntax that permits to select the page and return [[docs:templating:variable|page attribute]] used in a [[docs:templating:iterator|template iterator]].



===== Example =====



===== Syntax =====

==== Select ====

<railroad>
<code bnf display="none">
'SELECT'  \
[ 'WHERE' predicate {',' predicate } ] \
[ 'ORDER BY' attribute ('ASC'|'DESC')? {',' attribute ('ASC'|'DESC')?} ] \
[ limit 'Number' ] ;
</code>
</railroad>


==== Attribute ====
The ''attribute'' are defined in the [[docs:templating:variable|page attribute]]

==== Predicate ====

A predicate takes the below form:
<railroad>
<code bnf display="none">
filter-attribute  ( ('='|'!=')  'value' ||  ['NOT'] ('GLOB' glob-pattern | 'LIKE'  like-pattern  ['ESCAPE' 'char']))
</code>
</railroad>


==== filter-attribute ====
If your [[docs:analytics:query##json_support|sqlite does not support Json]], you can't filter on all [[docs:templating:variable|attribute]].

The [[docs:templating:variable|attributes]] that can be used to filter are:
  * [[docs:semantic:path|path]]
  * [[docs:semantic:name|name]]
  * [[docs:semantic:title|title]]
  * [[docs:semantic:h1|h1]]
  * ''date_created''
  * ''date_modified''
  * [[docs:semantic:published|date_published]]
  * [[docs:semantic:event|date_start]]
  * [[docs:semantic:event|date_end]]
  * ''word_count''
  * [[docs:quality:low_quality_page|is_low_quality]]

=== glob-pattern ===

''GLOB'' pattern matching is case sensitive and uses the [[kb>glob|Unix file globbing syntax]] for its wildcards:
      * ''*'' matches any number of characters (including none)
      * ''?'' matches exactly one character.
      * ''[]'' specify a set of single characters or, when the hyphen character ''-'' is used, a range of characters. Example: ''[aeiou]'' matches any lowercase vowel, ''[0-9]'' matches any digit.
      * the backslash character ''\'' is the escape character. ie ''\\'' matches a single backslash, ''\?'' matches the question mark.
       * any other characters match itself.
Subpatterns are not supported by Sqlite (ie ''{sun,moon,stars}'' to match ''sun'', ''moon'', or ''stars'')

**example:** the [[docs:semantic:path|path]] and [[docs:semantic:title|title]] of all pages that ends with 3 digits.

<code sql>
select where path glob '*[0-9][0-9][0-9]'
</code>
<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select where path glob '*[0-9][0-9][0-9]'
</data>
^ Page ^
<template>
| [[$path|$path]] - $title |
</template>
</iterator>
</code>
This sql returns the following data for this website.
</webcode>


=== like-pattern ===

The ''LIKE'' is not case sensitive and in the pattern expression:
      * ''%'' matches any sequence of zero or more characters
      * ''_'' matches any single character.
      * any other characters match itself.




**example:** If you want to get:
  * the [[docs:semantic:path|path]] and [[docs:semantic:title|title]] of all pages
  * that have the terms ''image'', ''svg'' or ''raster'' in their [[docs:semantic:path|path]]
you would use the following page sql:
<code sql>
select where path like '%image%' or path like '%svg%' or path like '%raster%'
</code>

<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select where path like '%image%' or path like '%svg%' or path like '%raster%'
</data>
^ Pages ^ Title ^
<template>
| [[$path|$path]] | $title |
</template>
</iterator>
</code>
This page sql will return the following pages for this website.
</webcode>


==== Limit ====
The ''limit'' clause permits to return the first rows. It's mostly used in ''Recent'' statement such as the last pages recently modified or created.


Example: If you want to get the last 4 pages along with the modification date and the [[docs:semantic:path|path]], you would execute this query:

<code sql>
select order by date_modified desc limit 4
</code>

<webcode name="Default" frameborder="0">
<code dw display="none">
<iterator>
<data>
select order by date_modified desc limit 4
</data>
^ Pages ^ Date Modified ^
<template>
| [[$path|$path]] | $date_modified |
</template>
</iterator>
</code>
This sql returns the following pages for this website.
</webcode>



