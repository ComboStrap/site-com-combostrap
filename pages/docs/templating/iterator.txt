---json
{
    "description": "With the template iterator, you can loop over a template to create any list of page components such as the list of the last blog or recent pages",
    "page_id": "5acenddpfdkik3h087892",
    "title": "The iterator: Template iteration made easy"
}
---
====== ComboStrap - Template Iterator ======

===== About =====
''iterator'' permits to loop and applies a [[docs:templating:template|template]] in order to create a list of pages.

You may apply the following layout:
  * [[docs:layout:component:masonry|masonry]]
  * [[docs:layout:component:carrousel|carrousel]]
  * [[docs:lists:list|simple list]]
  * [[docs:lists:table|table]]
  * [[docs:lists:content-list|content list]]
  * [[docs:layout:component:grid|grid]]


===== Example =====
==== Masonry ====

The below ''iterator'' example:
  * will generate the last 4 modified pages (defined by the [[sql|page sql]] in the ''data'' node)
<code sql>
select order by date_modified desc limit 4
</code>
  * as a list of [[docs:block:card|card]] (defined in the [[docs:templating:template|template]] node)
  * laid out in a [[docs:layout:component:masonry|masonry layout]]
  * with a [[docs:content:heading|display heading]] (ie ''heading d3'')
  * and the [[docs:content:page-image|illustrative image of the page]] (ie ''page-image'')

<hr/>

<webcode name="Default" frameborder="0">
**The iterator markup:**
<code dw>
<iterator>
    <data>select where is_low_quality = 0 order by date_modified desc limit 4</data>

    <heading d3 text-align="center" spacing="mb-3"> The last 4 Changes </heading>
    <masonry>
        <template>
            <card clickable>
            <page-image path="$path" ratio="16:9"/>
            === $title ===
            <itext color="muted"><date format="%h %d - %H:%M">$date_modified</date></itext>
            
            $description [[$path| ]]
            </card>
        </template>
    </masonry>
</iterator>
</code>
**The Result:**
</webcode>

===== Syntax =====
<code dw>
<iterator>
   <data>select where variable = 'xxx'</data>
   ... header  markup...
   <template>$variable1 ... $variable2</template>
   ... footer  markup...
</iterator>
</code>
where:
  * ''data'' contains a [[sql|page sql]]
  * ''template'' is a [[docs:templating:template|template]] that will be repeated for each data row.


<note>
  * If your iteration is time-based, you may need to set a [[docs:cache:page_expiration_frequency|page cache expiration frequency]].
  * If the data does not return any rows, the iterator content is not printed (ie header and footer included)
</note>
