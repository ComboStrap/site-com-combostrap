---json
{
    "description": "A pipeline permits to transform a variable value with a succession of transformation function.",
    "page_id": "x8speed0rna8y7lqsocge",
    "title": "ComboStrap Pipeline"
}
---

====== ComboStrap UI - Pipeline ======


===== About =====
A ''pipeline'' is a serie of function that may transform a [[docs:templating:variable|variable value]]




===== Syntax =====

<code dw>
${variable | function | function | ... }
</code>
where:
  * ''variable'' is a [[:docs:templating:variable|variable]]
  * ''function'' is one of:
      * [[#capitalize]] - make the first letter of each word a capital letter (ie uppercase letter)
      * [[#cut]] - cut the string in parts and return one
      * [[#head]] - return the first words
      * [[#replace]] - replace a string
      * [[#rconcat]] - add a string at the right side
      * [[#trim]] - delete any space before and after
      * [[#format]] - format a date

===== Functions =====


==== Capitalize ====
''capitalize'' is a function that will make the first letter of each word an uppercase letter (ie capital letter)

**Syntax**:
<code>
capitalize()
</code>

Example:
<webcode name="capitalize" frameborder=0 >
<code dw>
${description | capitalize()}
</code>
Output:
</webcode>


==== Cut ====
''cut'' is a function that will split the string in parts and returned the asked part concatenated. If the separator is not found, the original string is returned

**Syntax**:
<code>
cut("separator",selector)
</code>
where:
  * ''separator'' can be a simple character or a regular expression.
  * ''selector'' is a token selection in the form ''x[-y]'' where:
      * ''x'' is the first token to select
      * ''-'' will select also the next tokens (optional, if not set only one token is returned)
      * ''y'' is the last token to select (optional, by default, the last one)

Example:
  * Range Token Selection. Select all token after the number 10
<webcode name="cut" frameborder=0 >
<code dw>
${description | cut(" ","10-")}
</code>
Output:
</webcode>
  * Single Token Selection. Select only the second token
<webcode name="cut" frameborder=0 >
<code dw>
${description | cut(" ",2)}
</code>
Output:
</webcode>
  * If the separator is not found, the function has not effect on the given string.
<webcode name="cut" frameborder=0 >
<code dw>
${title | cut("-",2)}
</code>
Output:
</webcode>


==== Head ====
''head'' is a function that will extract the first words that are in the maximal length specified.

**Syntax**:
<code>
head($length, $tail)
</code>
where:
  * ''length'' is the maximal length of the output string
  * ''tail'' is an optional string that is added if the input string was cut

For instance:
<webcode name="rconcat" frameborder=0 >
<code dw>
${description | head(20 , "...")}
</code>
Output:
</webcode>



==== Rconcat ====
''rconcat'' is a function that will concatenate a string to the right. It's deprecated for the tail argument of the [[#head]] function.

**Syntax**:
<code>
rconcat($string)
</code>

For instance:
<webcode name="rconcat" frameborder=0 >
<code dw>
${description | head(20) | rconcat("...")}
</code>
Output:
</webcode>

==== Replace ====
''replace'' is a function that will search a string and replace it.

**Syntax**:
<code>
replace($search, $replace)
</code>

For instance:
<webcode name="Replace" frameborder=0 >
<code dw>
${title | replace("Pipeline","Pipe-line")}
</code>
Output:
</webcode>

==== Trim ====
''trim'' is a function that strip whitespace from the beginning and end of a string

**Syntax**:
<code>
trim()
</code>

For instance:
<webcode name="cut" frameborder=0 >
<code dw>
${title | trim()}
</code>
Output:
</webcode>

==== Format ====

The format function permits to format a date.

**Syntax**:
<code bash>
format(pattern, locale)
</code>
where:
  * ''locale'' is a [[:docs:locale:locale|locale]] (region and language)
  * ''pattern'' is an optional
    * [[https://unicode-org.github.io/icu/userguide/format_parse/datetime/#datetime-format-syntax|ISO date pattern]]
    * or two ''normal name'' separated by a space ''normalNameForDate normalNameForTime''

The ''normal names'' produce a normal date format for the [[:docs:locale:region|country (region)]]. The supported ''normal names'' are:

^ Name ^ Date ^ Time ^
| ''short'' | 12/13/52 | 3:30pm |
| ''medium'' | Jan. 12, 1952 | |
| ''long'' | January 12, 1952 | 3:30:32pm |
| ''full'' | Tuesday, April 12, 1952 | 3:30:42pm PST |

For instance:

  * Default
<webcode>
<code dw>
${now | format()}
</code>
</webcode>
  * With normal name format
<webcode>
<code dw>
${now | format('full short')}
</code>
</webcode>
  * With an iso pattern
<webcode>
<code dw>
${now | format('mmm dd yyyy')}
</code>
</webcode>


For more example, see [[howto:date|the dedicated date page]]
